@using Blazorise
@using BlazorApp.Encryptor;
@inject IJSRuntime JsRuntime;
@inject IEncryptor IEncryptor;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@using BlazorApp.Models

<Modal @ref="modalRef">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>Pujar</ModalTitle>
        </ModalHeader>
        <ModalBody>
            <div class="container">
                <EditForm Model="@pujarModel" OnValidSubmit="@Save_Puja">
                    <DataAnnotationsValidator />
                    <Blazorise.ValidationSummary />
                    <div class="field">
                        <label class="form-label"><span class="h4">Código: @modalId</span></label>
                        <label class="form-label"><span class="h4">@modalDescripcion</span></label>
                        <label class="form-label"><span class="h4">Monto #</span></label>
                        <div class="form-group">
                            <Blazorise.InputMask id="montopujar" name="montopujar" @bind-value="@pujarModel.MontoPujar" Mask="9999999" class="form-control" />
                            <ValidationMessage For="@(()=>pujarModel.MontoPujar)" />
                        </div>
                    </div>
                    <div class="field">
                        <div class="control">
                            <button type="submit" disabled="@(!IsConnected)" class="btn btn-success">OK</button>
                        </div>
                    </div>
                </EditForm>
                <hr/>
                <div class="field">
                    <div class="control">
                        <Button Color="Color.Secondary" Clicked="@HideModal">Cerrar</Button>
                    </div>
                </div>
            </div>
        </ModalBody>
    </ModalContent>
</Modal>

<Modal @bind-Visible="@modalVisible" Closing="@OnModalClosing">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>Ultimas Pujas</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <ul id="messagesList">
                @foreach (var message in Pujamessages)
                {
                    <li>@message.userInput</li>
                    <li>@message.messageInput</li>
                }
            </ul>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@ShowModalPujas">Quiero pujar</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {

    private Modal modalRef;

    private Task ModalPuja()
    {
        modalVisible = true;
        return modalRef.Hide();
    }

    private Task ShowModalPujas()
    {
        modalVisible = false;
        return modalRef.Show();
    }

    private Task HideModal()
    {
        modalVisible = true;
        return modalRef.Hide();
    }
    private HubConnection? hubConnection;

    private List<string> messages = new List<string>();

    private string? userInput;

    private string? messageInput;

    private List<ModalPuja> Pujamessages = new List<ModalPuja>();

    EditContext? context;

    [Parameter]
    public bool modalVisible { get; set; }

    [Parameter]
    public string modalDescripcion { get; set; }

    [Parameter]
    public string modalPuja { get; set; }

    [Parameter]
    public string modalIdAfiliado { get; set; }

    [Parameter]
    public string modalId { get; set; }

    private bool visible = false;

    private string IdPuja;

    private PujarModel pujarModel = new PujarModel();

    private BlazorApp.Models.ModalPuja pujarModelDto = new BlazorApp.Models.ModalPuja();

    private async Task Save_Puja()
    {
        if (hubConnection is not null)
        {
            IdPuja = modalId;
            userInput = "Afiliado:" + modalIdAfiliado;
            messageInput = modalId + "|" + modalDescripcion + "|" + "$" + pujarModel.MontoPujar.Replace("_", string.Empty);
            await hubConnection.SendAsync("SendMessage", userInput, messageInput, IdPuja);
        }

        var cadena = modalIdAfiliado + "|" + modalId + "|" + pujarModel.MontoPujar;
        var result = IEncryptor.EnCryption(cadena);
        await JsRuntime.InvokeVoidAsync("CreatePuja", result);
        await ModalPuja();
        StateHasChanged();
    }

    private Task OnModalClosing(ModalClosingEventArgs e)
    {
        if (modalVisible == true)
        {
            JsRuntime.InvokeVoidAsync("recargar");
        }

        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string, string>("ReceiveMessage", (user, message, idpuja) =>
             {
                 var pujarModelDto = new ModalPuja
                     {
                         IdPuja = idpuja,
                         userInput = user,
                         messageInput = message,
                         createdate = DateTime.Now
                     };

                 Pujamessages.Add(pujarModelDto);
                 Pujamessages = Pujamessages.Where(x => x.IdPuja == modalId).ToList().OrderByDescending(x => x.createdate).ToList();
                 if (Pujamessages.Count() >= 2)
                 {
                     Pujamessages = Pujamessages.Where(x => x.IdPuja == modalId).ToList().OrderByDescending(x => x.createdate).ToList().GetRange(0, 2);
                 }
                 StateHasChanged();
             });

        await hubConnection.StartAsync();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public class PujarModel
    {
        [Required(ErrorMessage = "El Monto es Obligatorio.")]
        [StringLength(40, MinimumLength = 5,
                  ErrorMessage = "El Monto debe tener entre 5 y 10")]
        public string? MontoPujar { get; set; }

    }
}
