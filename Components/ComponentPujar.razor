@using Blazorise
@using BlazorApp.Encryptor;
@inject IJSRuntime JsRuntime;
@inject IEncryptor IEncryptor;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<Modal @bind-Visible="@modalVisible" Closing="@OnModalClosing">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>Pujar</ModalTitle>
            <CloseButton />
            <ul id="messagesList">
                @foreach (var message in messages)
                {
                    <li>@message</li>
                }
            </ul>
        </ModalHeader>
        <ModalBody>
            <div class="container">
                <EditForm Model="@pujarModel" OnValidSubmit="@Save_Puja">
                    <DataAnnotationsValidator />
                    <Blazorise.ValidationSummary />
                    <div class="field">
                        <label class="form-label"><span class="h4">Código: @modalId</span></label>
                        <label class="form-label"><span class="h4">@modalDescripcion</span></label>
                        <label class="form-label"><span class="h4">Monto #</span></label>
                        <div class="form-group">
                            <Blazorise.InputMask id="montopujar" name="montopujar" @bind-value="@pujarModel.MontoPujar" Mask="9999999" class="form-control" />
                            <ValidationMessage For="@(()=>pujarModel.MontoPujar)" />
                        </div>
                    </div>
                    <div class="field">
                        <div class="control">
                            <button type="submit" class="btn btn-success">OK</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </ModalBody>
    </ModalContent>
</Modal>
<div class="modal" id="modal-id">
    <a href="#close" class="modal-overlay" aria-label="Close"></a>
    <div class="modal-container">
        <div class="modal-header">
            <a href="#Close" class="btn btn-clear float-right" aria-label="Close"></a>
            <div class="modal-title h5">Ultimas Pujas</div>
            <ul id="messagesList">
                @foreach (var message in messages)
                {
                    <li>@message</li>
                }
            </ul>
        </div>
        <div class="modal-body">
            <div class="content">
                <strong style="color:black;font-size:medium">Monitorización de Pujas</strong>
            </div>
        </div>
    </div>
</div>
@code {

    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    EditContext? context;

    [Parameter]
    public bool modalVisible { get; set; }

    [Parameter]
    public string modalDescripcion { get; set; }

    [Parameter]
    public string modalPuja { get; set; }

    [Parameter]
    public string modalIdAfiliado { get; set; }

    [Parameter]
    public string modalId { get; set; }

    private bool visible = false;

    private PujarModel pujarModel = new PujarModel();

    private async Task Save_Puja()
    {
        if (hubConnection is not null)
        {
            userInput = "Afiliado:" + modalIdAfiliado; 

            messageInput = modalId +"|"+ modalDescripcion + "|" + "$"+ pujarModel.MontoPujar.Replace("_", string.Empty);

            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }

        modalVisible = false;
        var cadena = modalIdAfiliado + "|" + modalId + "|" + pujarModel.MontoPujar;
        var result = IEncryptor.EnCryption(cadena);
        await JsRuntime.InvokeVoidAsync("CreatePuja", result);
        StateHasChanged();
    }

    private Task OnModalClosing(ModalClosingEventArgs e)
    {
        if (modalVisible == true)
        {
            JsRuntime.InvokeVoidAsync("recargar");
        }

        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user} {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public class PujarModel
    {
        [Required(ErrorMessage = "El Monto es Obligatorio.")]
        [StringLength(40, MinimumLength = 5,
                  ErrorMessage = "El Monto debe tener entre 5 y 10")]
        public string? MontoPujar { get; set; }

    }
}
