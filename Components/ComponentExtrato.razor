@using BlazorApp.Pages
@using Microsoft.AspNetCore.Components
@using MatBlazor
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@inject ILocalStorageService _localStorageService
@inject IMovPackageDataQueries _movpackagedataqueries
@inject IUserDataQueries UserDataQueries
@inject IAccountService _IAccountService
@inject IJSRuntime JsRuntime
@using BlazorApp.Cache
@inject ICacheBase cache

<Container>
    <SourceContent>
        <MatTable Items="@movPackages" class="mat-elevation-z5">
            <MatTableHeader>
                <th><strong>Operación</strong></th>
                <th><strong>Monto</strong></th>
                <th><strong>Fecha</strong></th>
                <th><strong>Retiro</strong></th>
                <th><strong>Transferencia</strong></th>
@*                <th><strong>Interes</strong></th>*@
            </MatTableHeader>
            <MatTableRow>
                  <td><strong>@context.CodPackage</strong></td>
                  <td><strong>@string.Format("${0:f2}", @context.MontoPackage)</strong></td>
                  <td><strong>@string.Format("{0:d}",@context.DateCreated)</strong></td>
                  <td><strong>@string.Format("${0:f2}", @context.MontoRetiro)</strong></td>
                  <td><strong>@string.Format("${0:f2}", @context.MontoTransferido)</strong></td>
@*                <td><strong>@string.Format("${0:f2}", @context.Interes)</strong></td>
*@            </MatTableRow>
        </MatTable>
    </SourceContent>
</Container>
@code {
    private string? email;
    private string _userKey = "key";
    public List<BlazorApp.Entities.Xpo.MovPackage> movPackages;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var emailStorage = await _localStorageService.GetItem<String>(_userKey);
            var key = KeyCache.GenCacheKey("User");
            var result = cache.Get<User>(key);
            if (result != null)
            {
                emailStorage = result.Email.ToList().FirstOrDefault();
            }
            else
            {
                var state = await authenticationStateProvider.GetAuthenticationStateAsync();
                if (!state.User.Identity.IsAuthenticated)
                {
                    navigationManager.NavigateTo("/account/signin?returnUrl=" + System.Net.WebUtility.UrlEncode(new Uri(navigationManager.Uri).PathAndQuery));
                }
                else
                {
                    emailStorage = state.User.Identities.FirstOrDefault().Name;
                }
            }

            var UserData = await UserDataQueries.GetUserDataAsync(emailStorage);
            if (UserData != null)
            {
                //movPackages = await _movpackagedataqueries.GetAfiliadoDataAsync(UserData.Id).ConfigureAwait(false);
                movPackages = await _IAccountService.Get(UserData.Id).ConfigureAwait(false);

                await JsRuntime.InvokeVoidAsync("mostrar");
                StateHasChanged();
            }
        }
    }
}