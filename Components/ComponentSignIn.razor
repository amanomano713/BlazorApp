@using BlazorApp.Models
@using Blazorise
@using Microsoft.AspNetCore.Identity
@using BlazorApp.Cache
@inject UserManager<IdentityUser> userManager
@inject SignInManager<IdentityUser> signInManager
@inject NavigationManager navigationManager
@inject IAccountService AccountService
@inject IJSRuntime JsRuntime
@inject ICacheBase cache
@inject IHttpClientFactory _httpClientFactory
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@using System.Security.Claims;
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using System.Text
@using Newtonsoft.Json
@using System.Collections.Generic
@using System.ComponentModel
@using System.Threading;
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Threading.Tasks;


@if (@SignInmovil == false)
{
    <h1 class="title">Conectate-Desktop</h1>
}
else
{
    <h1 class="title">Conectate-Móvil</h1>
}
<EditForm Model="@signInModel" OnValidSubmit="@LoginUser">
    <DataAnnotationsValidator />
    @if (@SignInmovil == false)
    {
        <div class="field">
            <label class="form-label"><span class="h4">Email</span></label>
            <div class="form-group">
                <InputText class="col-lg-4" id="email" type="email" @bind-Value="@signInModel.Email"></InputText>
                <ValidationMessage For="@(()=>signInModel.Email)" />
            </div>
        </div>
        <div class="field">
            <label class="form-label"><span class="h4">Password</span></label>
            <div class="form-group">
                <InputText class="col-md-3" id="password" type="password" @bind-Value="@signInModel.Password"></InputText>
                <ValidationMessage For="@(()=>signInModel.Password)" />
            </div>
        </div>
    }
    else
    {
        <div class="field">
            <label class="form-label"><span class="h4">Email</span></label>
            <div class="form-control-wallet">
                <InputText class="col-lg-4" id="email" type="email" @bind-Value="@signInModel.Email"></InputText>
                <ValidationMessage For="@(()=>signInModel.Email)" />
            </div>
        </div>
        <div class="field">
            <label class="form-label"><span class="h4">Password</span></label>
            <div class="form-control-wallet">
                <InputText class="col-md-3" id="password" type="password" @bind-Value="@signInModel.Password"></InputText>
                <ValidationMessage For="@(()=>signInModel.Password)" />
            </div>
        </div>
    }
    <div class="field">
        <div class="control">
            <button type="submit" class="btn btn-success">OK</button>
        </div>
    </div>
</EditForm>
@if (showSignInError)
{
    <div class="col-lg-5 notification is-danger">
        Lo sentimos, nombre de usuario o contraseña incorrectos.
    </div>
}

@code {

    private bool visible = false;
    private SignInModel signInModel = new SignInModel();
    private bool showSignInError = false;
    private string _configHttpClient = "Api.Users";
    private string _configHttpClientAuthenticate = "Api.authenticate";
    [Parameter]
    public bool SignInmovil { get; set; }

    private async Task LoginUser()
    {
        var response = await GetAsync(signInModel.Email).ConfigureAwait(false);

        if (response.StatusCode != System.Net.HttpStatusCode.OK)
        {
            showSignInError = true;
        }
        else
        {
            var user = await userManager.FindByEmailAsync(signInModel.Email);

            if (user != null && await userManager.CheckPasswordAsync(user, signInModel.Password))
            {

                showSignInError = false;

                var token = await userManager.GenerateUserTokenAsync(user, TokenOptions.DefaultProvider, "SignIn");

                var data = $"{user.Id}|{token}";

                var parsedQuery = System.Web.HttpUtility.ParseQueryString(new Uri(navigationManager.Uri).Query);

                var returnUrl = parsedQuery["returnUrl"];

                if (!string.IsNullOrWhiteSpace(returnUrl))
                {
                    data += $"|{returnUrl}";
                }

                //var protector = dataProtectionProvider.CreateProtector("SignIn");

                //var pdata = protector.Protect(data);

                //guardo el email en el localStorage

                signInModel.Token = token;

                //Cache Redis
                var key = KeyCache.GenCacheKey("User");

                var result = cache.Get<User>(key);

                if (result == null)
                {
                    CacheUser(signInModel.Email, key);
                }
                else
                {
                    cache.Remove(key);
                    CacheUser(signInModel.Email, key);
                }

                LoginRequest loginRequest = new LoginRequest
                    {
                        Username = signInModel.Email
                    };

                await AccountService.Login(signInModel).ConfigureAwait(false);

                navigationManager.NavigateTo("/account/signinactual?cadena=" + data, forceLoad: true);
            }
        }
    }

    private void CacheUser(string? correo, string? key)
    {
        List<string> valuesList = new List<string>();

        valuesList.Add(correo);

        User _user = new User();

        _user.Email = valuesList;

        cache.Set<User>(_user, key);
    }

    private async Task<HttpResponseMessage> GetAsync(string email)
    {

        LoginRequest loginRequest = new LoginRequest
            {
                Username = email
            };

        HttpResponseMessage responseToken = await AccountService.GeneratorToken(loginRequest).ConfigureAwait(false);
        
        var resultToken = responseToken.Content.ReadAsStringAsync().ConfigureAwait(false).GetAwaiter().GetResult();
        
        resultToken = resultToken.Replace("\"", "");

        var httpClient = _httpClientFactory.CreateClient(_configHttpClient);
        
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", resultToken);
        
        return await httpClient.GetAsync($"UserInfo/{email}");
    }
}
