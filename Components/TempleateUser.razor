@using BlazorApp.Models
@inject ILocalStorageService _localStorageService
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@inject IUserDataQueries UserDataQueries
@using Blazorise;

<div class="row">
    <div class="col-md-4">
        <div class="form-group" style="margin-top:10px">
            <label class="control-label">
                <strong style="color:black;font-size:x-large">Nombre #</strong>
            </label>
            <InputMask id="name" name="name" disabled @bind-Value="@name" class="form-control" />
        </div>
    </div>
    <div class="col-md-4">
        <div class="form-group" style="margin-top:10px">
            <label class="control-label">
                <strong style="color:black;font-size:x-large">Apellido #</strong>
            </label>
            <InputMask class="form-control" disabled id="surname" name="surname" @bind-value="@surname" />
        </div>
    </div>
</div>
@code {

    private string _userKey = "key";
    private string? name;
    private string? surname;

    public UserDTO Account = new UserDTO();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        var emailStorage = await _localStorageService.GetItem<string>(_userKey);

        if (firstRender)
        {
            if (string.IsNullOrEmpty(emailStorage))
            {
                var state = await authenticationStateProvider.GetAuthenticationStateAsync();
                if (!state.User.Identity.IsAuthenticated)
                {
                    navigationManager.NavigateTo("/account/signin?returnUrl=" + System.Net.WebUtility.UrlEncode(new Uri(navigationManager.Uri).PathAndQuery));
                }
            }
            else
            {
                UserDTO userData = new UserDTO();
                var UserData = await UserDataQueries.GetUserDataAsync(emailStorage);
                if (UserData != null)
                {
                    name = UserData.name.Trim();
                    surname = UserData.surname.Trim();
                }
            }

            StateHasChanged();
        }
    }
}
