@page "/account/signin"
@using BlazorApp.Models
@inject UserManager<IdentityUser> userManager
@inject SignInManager<IdentityUser> signInManager
@inject NavigationManager navigationManager
@inject IDataProtectionProvider dataProtectionProvider
@inject IAccountService AccountService
@using Blazorise

<Blazorise.Container Breakpoint="Breakpoint.Desktop">
    <Blazorise.Alert Color="Color.Secondary" Visible="true">
        <ComponentContraseña modalVisible=@visible></ComponentContraseña>
        <div class="container">
            <h1 class="title">Conectate</h1>
            <EditForm Model="@signInModel" OnValidSubmit="@RegisterUser">
                <DataAnnotationsValidator />
                <div class="field">
                    <label class="form-label"><span class="h4">Email</span></label>
                    <div class="form-group">
                        <InputText class="col-lg-5" id="email" type="email" @bind-Value="@signInModel.Email"></InputText>
                        <ValidationMessage For="@(()=>signInModel.Email)" />
                    </div>
                </div>
                <div class="field">
                    <label class="form-label"><span class="h4">Password</span></label>
                    <div class="form-group">
                        <InputText class="col-md-3" id="password" type="password" @bind-Value="@signInModel.Password"></InputText>
                        <ValidationMessage For="@(()=>signInModel.Password)" />
                    </div>
                </div>
                <div class="field">
                    <div class="control">
                        <button type="submit" class="btn btn-success">OK</button>
                    </div>
                </div>
            </EditForm>
            @if (showSignInError)
            {
                <div class="col-lg-5 notification is-danger">
                    Lo sentimos, nombre de usuario o contraseña incorrectos.
                </div>
            }
        </div>
        <div class="container">
            <p class="h6">¿Aún no tienes cuenta? <a href="/account/register" style="color: #363636">Crear nueva cuenta</a></p>
        </div>
        <hr>
        <div class="container">
            <p class="h6">Haz olvidado la contraseña? <Button Color="Color.Primary" Clicked="@ShowModal">Cambio de Contraseña</Button></p>
        </div>
    </Blazorise.Alert>
</Blazorise.Container>
<div class="container">
    <Jumbotron Background="Background.Dark" Margin="Margin.Is4.FromBottom">
        <JumbotronTitle Size="JumbotronTitleSize.Is4">Un mundo de nuevas posibilidades!</JumbotronTitle>
        <JumbotronSubtitle>
            El mundo actual avanza a pasos de gigante. Lo que ayer nos entusiasmaba y parecía moderno, hoy está obsoleto y no produce beneficios.
        </JumbotronSubtitle>
        <Divider></Divider>
        <Paragraph>
            ¿Cómo tener éxito en un mundo que se desarrolla vertiginosamente?
        </Paragraph>
    </Jumbotron>
</div>

@code {

    private bool visible = false;
    private SignInModel signInModel = new SignInModel();
    private bool showSignInError = false;

    private Task ShowModal()
    {
        visible = true;

        return Task.CompletedTask;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        StateHasChanged();
    }

    private async Task RegisterUser()
    {

        var user = await userManager.FindByEmailAsync(signInModel.Email);

        if (user != null && await userManager.CheckPasswordAsync(user, signInModel.Password))
        {
            showSignInError = false;

            var token = await userManager.GenerateUserTokenAsync(user, TokenOptions.DefaultProvider, "SignIn");

            var data = $"{user.Id}|{token}";

            var parsedQuery = System.Web.HttpUtility.ParseQueryString(new Uri(navigationManager.Uri).Query);

            var returnUrl = parsedQuery["returnUrl"];

            if (!string.IsNullOrWhiteSpace(returnUrl))
            {
                data += $"|{returnUrl}";
            }

            var protector = dataProtectionProvider.CreateProtector("SignIn");

            var pdata = protector.Protect(data);

            //guardo el email en el localStorage

            signInModel.Token = token;

            await AccountService.Login(signInModel);

            navigationManager.NavigateTo("/account/signinactual?cadena=" + pdata, forceLoad: true);

        }
        else
        {
            showSignInError = true;
        }
    }
}
