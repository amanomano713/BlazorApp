@page "/account/register"
@inject UserManager<IdentityUser> userManager
@inject NavigationManager navigationManager
@using Blazorise
<Blazorise.Container Breakpoint="Breakpoint.Desktop">
     <Blazorise.Alert Color="Color.Secondary" Visible="true">
<div class="container">


    <h1 class="title">Regístrate</h1>

    <EditForm Model="@registerAccountModel" OnValidSubmit="@RegisterUser">
        <DataAnnotationsValidator />
        <div class="field">
            <label class="form-label"><span class="h4">Email</span></label>
            <div class="form-group">
                <InputText class="col-lg-5" id="email"  type="email" @bind-Value="@registerAccountModel.Email"></InputText>
                <ValidationMessage For="@(()=>registerAccountModel.Email)" />
            </div>
        </div>
        <div class="field">
            <label class="form-label"><span class="h4">Password</span></label>
            <div class="form-group">
               <InputText class="col-md-3" id="password"  type="password" @bind-Value="@registerAccountModel.Password"></InputText>
               <ValidationMessage For="@(()=>registerAccountModel.Password)" /> 
           </div>
        </div>
        <div class="field">
            <label class="form-label"><span class="h4">Confirmación password</span></label>
            <div class="form-group">
                <InputText class="col-md-3" id="cpassword" type="password" @bind-Value="@registerAccountModel.ConfirmPassword"></InputText>
                <ValidationMessage For="@(()=>registerAccountModel.ConfirmPassword)" /> 
            </div>
        </div>
        <div class="field">
            <div class="control">
                <button type="submit" class="btn btn-success">OK</button>
            </div>
        </div>
    </EditForm>
    @if (showSignInError)
    {
       <div class="col-lg-5 notification is-danger">
           Lo sentimos, email de usuario ya existe.
       </div>

    }
</div>
    </Blazorise.Alert>
</Blazorise.Container>
@code {

    private RegisterAccountModel registerAccountModel = new RegisterAccountModel();
    private bool showSignInError = false;
    private async Task RegisterUser()
    {
        var user = await userManager.FindByEmailAsync(registerAccountModel.Email).ConfigureAwait(false);
        if (user != null)
        {
            showSignInError = true;
        }
        var result = await userManager.CreateAsync(new IdentityUser { UserName = registerAccountModel.Email, Email = registerAccountModel.Email, EmailConfirmed = true }, registerAccountModel.Password);

        if (result.Succeeded)
        {
            navigationManager.NavigateTo("account/signin");

        }
    }

    public class RegisterAccountModel
    {
        [Required(ErrorMessage = "Email es Obligatorio.")]
        [StringLength(40, MinimumLength = 10,
                  ErrorMessage = "El Email debe tener entre 10 y 40 caracteres")]
        public string Email { get; set; }
        [Required(ErrorMessage = "Password es Obligatorio.")]
        [StringLength(10, MinimumLength = 6,
                  ErrorMessage = "El Password debe tener entre 6 y 10 caracteres")]
        public string Password { get; set; }
        [Required(ErrorMessage = "ConfirmPassword es Obligatorio.")]
        [Compare(nameof(Password), ErrorMessage = "Password no coinciden.")]
        public string ConfirmPassword { get; set; }
    }
}