@page "/account/register"
@inject UserManager<IdentityUser> userManager
@inject NavigationManager navigationManager
@inject IHttpClientFactory _httpClientFactory
@using Blazorise
@using System.Net
@using System.Net.Http.Headers
@inject IAccountService AccountService
<body>
    <div class="welcome"></div>
    <Jumbotron Background="Background.None" Margin="Margin.Is4.FromBottom">
        <Divider></Divider>
        <Paragraph>
            <Blazorise.Container Breakpoint="Breakpoint.Desktop">
                <Blazorise.Alert Color="Color.Secondary" Visible="true">
                    <div class="container">
                        <h1 class="title">Regístrate</h1>
                        <EditForm Model="@registerAccountModel" OnValidSubmit="@RegisterUser">
                            <DataAnnotationsValidator />
                            <div class="field">
                                <label class="form-label"><span class="h4">Email</span></label>
                                <div class="form-group">
                                    <InputText class="col-lg-5" id="email01" type="email" @bind-Value="@registerAccountModel.Email"></InputText>
                                    <ValidationMessage For="@(()=>registerAccountModel.Email)" />
                                </div>
                            </div>
                            <div class="field">
                                <label class="form-label"><span class="h4">Password</span></label>
                                <div class="form-group">
                                    <InputText class="col-md-3" id="password01" type="password" @bind-Value="@registerAccountModel.Password"></InputText>
                                    <ValidationMessage For="@(()=>registerAccountModel.Password)" />
                                </div>
                            </div>
                            <div class="field">
                                <label class="form-label"><span class="h4">Confirmación password</span></label>
                                <div class="form-group">
                                    <InputText class="col-md-3" id="cpassword01" type="password" @bind-Value="@registerAccountModel.ConfirmPassword"></InputText>
                                    <ValidationMessage For="@(()=>registerAccountModel.ConfirmPassword)" />
                                </div>
                            </div>
                            <div class="field">
                                <div class="control">
                                    <button type="submit" class="btn btn-success">OK</button>
                                </div>
                            </div>
                        </EditForm>
                        @if (showSignInError)
                        {
                            <div class="col-lg-5 notification is-danger">
                                Lo sentimos, email de usuario ya existe.
                            </div>

                        }
                    </div>
                </Blazorise.Alert>
            </Blazorise.Container>
        </Paragraph>
    </Jumbotron>
</body>>
@code {

    private RegisterAccountModel registerAccountModel = new RegisterAccountModel();
    private bool showSignInError = false;
    private string _configHttpClient = "Api.Users";

    private async Task RegisterUser()
    {

        var response = await GetAsync(registerAccountModel.Email).ConfigureAwait(false);

        if (response.StatusCode == HttpStatusCode.NotFound)
        {
            var result = await CreateUserAsync(registerAccountModel).ConfigureAwait(false);

            if (result.StatusCode == HttpStatusCode.OK)
            {
                navigationManager.NavigateTo("account/signin");
            }
        }
        else
        {
            showSignInError = true;
        }
    }

    public async Task<HttpResponseMessage> GetAsync(string email)
    {
        LoginRequest loginRequest = new LoginRequest
            {
                Username = email
            };

        HttpResponseMessage responseToken = await AccountService.GeneratorToken(loginRequest).ConfigureAwait(false);
        
        var resultToken = responseToken.Content.ReadAsStringAsync().ConfigureAwait(false).GetAwaiter().GetResult();
        
        resultToken = resultToken.Replace("\"", "");

        var httpClient = _httpClientFactory.CreateClient(_configHttpClient);
        
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", resultToken);

        return await httpClient.GetAsync($"UserInfo/{email}");
    }

    public async Task<HttpResponseMessage> CreateUserAsync(RegisterAccountModel registerAccountModel)
    {
         LoginRequest loginRequest = new LoginRequest
            {
                Username = registerAccountModel.Email
            };

        HttpResponseMessage responseToken = await AccountService.GeneratorToken(loginRequest).ConfigureAwait(false);
        
        var resultToken = responseToken.Content.ReadAsStringAsync().ConfigureAwait(false).GetAwaiter().GetResult();
        
        resultToken = resultToken.Replace("\"", "");

        var httpClient = _httpClientFactory.CreateClient(_configHttpClient);
        
        var content = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(registerAccountModel), System.Text.Encoding.UTF8, "application/json");
        
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", resultToken);

        return await httpClient.PatchAsync($"CreateUser", content);
    }

    public class RegisterAccountModel
    {
        [Required(ErrorMessage = "Email es Obligatorio.")]
        [StringLength(40, MinimumLength = 10,
                  ErrorMessage = "El Email debe tener entre 10 y 40 caracteres")]
        public string Email { get; set; }
        [Required(ErrorMessage = "Password es Obligatorio.")]
        [StringLength(10, MinimumLength = 6,
                  ErrorMessage = "El Password debe tener entre 6 y 10 caracteres")]
        public string Password { get; set; }
        [Required(ErrorMessage = "ConfirmPassword es Obligatorio.")]
        [Compare(nameof(Password), ErrorMessage = "Password no coinciden.")]
        public string ConfirmPassword { get; set; }
    }
}