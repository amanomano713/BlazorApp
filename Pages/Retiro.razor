@page "/retiro"
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@inject ILocalStorageService _localStorageService
@using Microsoft.JSInterop;
@inject IJSRuntime JS;
@inject IUserDataQueries UserDataQueries
@using Blazorise;

<div class="panel-body">
    <h2><i class="icon-edit-sign teal"></i> RETIRO </h2>
    <p>
        <strong style="color:black;font-size:medium">Crea una cuenta para administrar todo lo que haces con ClipOne, desde tus preferencias de compra hasta tu actividad en ClipOne</strong>
    </p>
    @if (displayErrorRetiro == true)
    {
        <div class="row bg-warning text-white" style="margin-top:10px; height:40px">
            <label class="p-2">Error el monto a retirar no puede ser mayor al saldo disponible... </label>
        </div>
    }
    <hr>
    <EditForm Model="@RetiroModel" OnSubmit="@SubmitRetiro">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-md-6">
                <div class="form-group" style="margin-top:10px">
                    <h1><strong style="color:black;font-size:x-large">Wallet #</strong></h1>
                    <InputMask id="wallet " name="wallet" disabled @bind-Value="@RetiroModel.Wallet" class="form-control" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <fieldset disabled>
                    <div class="form-group" style="margin-top:10px">
                        <h1><strong style="color:black;font-size:x-large">Saldo Disponible #</strong></h1>
                        <InputMask id="saldo" name="saldo" disabled @bind-Value="@saldo" class="form-control" />
                    </div>
                </fieldset>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group" style="margin-top:10px">
                    <h1><strong style="color:black;font-size:x-large">Monto a Retirar #</strong></h1>
                    <InputMask id="retiro" name="retiro" @bind-value="@RetiroModel.Retiro"  @oninput="ValueChanged" class="form-control" Mask="9999.99" DecimalSeparator="." />
                    <ValidationMessage For="@(()=>RetiroModel.Retiro)" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-8" style="margin-top:80px">
                <p>
                    <h5><strong style="color:black;font-size:large">Al hacer clic en RETIRAR, Asegurese que el WALLET es el suyo.</strong></h5>
                </p>
            </div>
            <div class="col-md-4" style="margin-top:80px">
                <button class="btn btn-yellow btn-block" type="submit">
                    Retirar <i class="icon-circle-arrow-right"></i>
                </button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    //Obtener el saldo y servicio de retiro

    bool displayErrorRetiro = false;
    EditContext? context;
    bool displayValidationErrorMessages = false;
    public RetiroDTO RetiroModel = new RetiroDTO();
    private string saldo = "1000";
    private string? email;
    private string _userKey = "key";
    private string? wallet;
    private string retiro = string.Empty;
    bool OnFieldChanged = false;

    protected override void OnInitialized()
    {
        context = new EditContext(RetiroModel);
        base.OnInitialized();
    }

    private void ValueChanged(ChangeEventArgs args)
    {
        OnFieldChanged = true;
    }

    private async void SubmitRetiro(EditContext context)
    {
        if (context.Validate() && OnFieldChanged == true)
        {
            string? Montoaretirar = RetiroModel.Retiro.Replace("_",string.Empty);

            var MontoRetiro = Convert.ToInt64(Montoaretirar);

            var SaldoDispo  = Convert.ToInt64(saldo);

            if (MontoRetiro > SaldoDispo )
            {

            }
            else
            {
                

            }

            displayValidationErrorMessages = false;
        }
        else
        {
            displayValidationErrorMessages = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var emailStorage = await _localStorageService.GetItem<String>(_userKey);
            if (string.IsNullOrEmpty(emailStorage))
            {
                var state = await authenticationStateProvider.GetAuthenticationStateAsync();
                if (!state.User.Identity.IsAuthenticated)
                {
                    navigationManager.NavigateTo("/account/signin?returnUrl=" + System.Net.WebUtility.UrlEncode(new Uri(navigationManager.Uri).PathAndQuery));
                }
                else
                {
                    email = state.User.Identities.FirstOrDefault().Name;
                }
            }
            else
            {
                var UserData = await UserDataQueries.GetUserDataAsync(emailStorage);
                if (UserData != null)
                {
                    RetiroModel.Id = UserData.Id;
                    RetiroModel.Wallet = UserData.wallet.Trim();
                    
                    //Se envia el retiro a esta variable
                    wallet = UserData.wallet.Trim();
                }
            }
            StateHasChanged();
        }
    }
}