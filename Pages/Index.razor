@page "/"
@using Microsoft.JSInterop;
@inject AuthenticationStateProvider authenticationStateProvider
@inject ILocalStorageService _localStorageService
@inject NavigationManager navigationManager
@inject IUserDataQueries UserDataQueries
@using Blazorise;
@inject IPackageMontoDataQueries PackageMontoDataQueries


<div class="panel-bod">
    <h2><i class="icon-edit-sign teal"></i> HOME</h2>
    <p>
        <strong style="color:black;font-size:medium">Crea una cuenta para administrar todo lo que haces con ClipOne, desde tus preferencias de compra hasta tu actividad en ClipOne</strong>
    </p>
    <hr>
</div>
<TempleateUser></TempleateUser>
<div class="row">
    <div class="col-md-6">
        <div class="form-group" style="margin-top:10px">
            <strong style="color:black;font-size:x-large">Disponible #</strong>
            <InputMask name="available" disabled @bind-Value="@available" class="form-control" />
        </div>
        <div class="form-group" style="margin-top:20px">
            <strong style="color:black;font-size:x-large">Paquetes #</strong>
            <InputMask name="packages" disabled @bind-Value="@packages" class="form-control" />
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="form-group" style="margin-top:10px">
            <strong style="color:black;font-size:x-large">Wallet BTC #</strong>
            <InputMask name="wallet" disabled @bind-Value="@wallet" class="form-control" />
        </div>
        <div class="form-group" style="margin-top:20px">
            <strong style="color:black;font-size:x-large">Código Afiliado #</strong>
            <InputMask name="codigo" disabled @bind-Value="@codigo" class="form-control" />
        </div>
    </div>
</div>

@code {

    public UserDTO AccountModel = new UserDTO();
    private string _userKey = "key";
    private IJSRuntime _jsRuntime;
    private string available = "1000.40";
    private string packages = "0";
    private string? wallet;
    private string? codigo;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var emailStorage = await _localStorageService.GetItem<String>(_userKey);

        if (firstRender)
        {

            if (string.IsNullOrEmpty(emailStorage))
            {
                var state = await authenticationStateProvider.GetAuthenticationStateAsync();
                if (!state.User.Identity.IsAuthenticated)
                {
                    navigationManager.NavigateTo("/account/signin?returnUrl=" + System.Net.WebUtility.UrlEncode(new Uri(navigationManager.Uri).PathAndQuery));
                }
            }
            else
            {
                UserDTO userData = new UserDTO();
                var UserData = await UserDataQueries.GetUserDataAsync(emailStorage);
                if (UserData != null)
                {
                    codigo = UserData.Id;
                    wallet = UserData.wallet.Trim();

                    var packagesTotal = await PackageMontoDataQueries.TotalPackageDataAsync(UserData.Id);
                    if (packagesTotal != null)
                    {
                        packages = packagesTotal.PackMonto.ToString();
                    }
                }

            }

            StateHasChanged();
        }
    }
}