@page "/"
@using Microsoft.JSInterop
@inject AuthenticationStateProvider authenticationStateProvider
@inject ILocalStorageService _localStorageService
@inject NavigationManager navigationManager
@inject IUserDataQueries UserDataQueries
@using Blazorise;
@inject IPackageMontoDataQueries PackageMontoDataQueries
@inject IAccountService _IAccountService
@inject IJSRuntime JS
@using BlazorApp.Cache
@inject ICacheBase cache

<body>
    <div class="welcome"></div>
    <div class="panel-bod">
        <Blazorise.Container Breakpoint="Breakpoint.Desktop">
            <Blazorise.Alert Color="Color.Info" Visible="true">
                <h3><i class="icon-edit-sign teal"></i> HOME</h3>
                <p>
                    <strong style="color:black;font-size:medium">
                        La plataforma es la manera más fácil de invertir en el sector inmobiliario. El proceso de inversión es 100% online, 
                        sin papeleos, ni visitas, ni trámites burocráticos.
                    </strong>
                </p>
            </Blazorise.Alert>
        </Blazorise.Container>
        <hr>
    </div>
    <Blazorise.Container Breakpoint="Breakpoint.Desktop">
        <Blazorise.Alert Color="Color.None" Visible="true">
            <TempleateUser></TempleateUser>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group" style="margin-top:10px">
                        <strong style="color:black;font-size:x-large">Disponible </strong>
                        <InputMask name="available" style="width:30%" disabled @bind-Value="@available" class="form-group-wallet-monto" />
                    </div>
                    <div class="form-group" style="margin-top:20px">
                        <strong style="color:black;font-size:x-large">Bitcoin </strong>
                        <InputMask name="packages" style="width:30%" disabled @bind-Value="@packages" class="form-control" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group" style="margin-top:10px">
                        <strong style="color:black;font-size:x-large">Wallet BTC </strong>
                        <InputMask name="wallet" style="width:80%" disabled @bind-Value="@wallet" class="form-control" />
                    </div>
                    <div class="form-group" style="margin-top:20px">
                        <strong style="color:black;font-size:x-large">Código Afiliado </strong>
                        <InputMask name="codigo" style="width:70%" disabled @bind-Value="@codigo" class="form-control" />
                    </div>
                    <div class="form-group" style="margin-top:20px">
                        <strong style="color:black;font-size:x-large">Resolución </strong>
                        <InputMask name="codigo" style="width:30%" disabled @bind-Value="@resolucion" class="form-control" />
                    </div>
                </div>
            </div>
        </Blazorise.Alert>
    </Blazorise.Container>
</body>

@code
{

    public UserDTO AccountModel = new UserDTO();
    private string _userKey = "key";
    private IJSRuntime _jsRuntime;
    private string available = "1000.40";
    private string packages = "0";
    private string? wallet;
    private string? codigo;

    private string? email;

    private string? resolucion;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //var mov = await _IAccountService.Get().ConfigureAwait(false);

        //var result = mov.ToList();

        //for (int i = 0; i < 60; i++)
        //{
        //     var result = await _IAccountService.CreateMovPackage().ConfigureAwait(false);
        //}

        var emailStorage = await _localStorageService.GetItem<String>(_userKey);

        if (firstRender)
        {

            if (string.IsNullOrEmpty(emailStorage))
            {
                var key = KeyCache.GenCacheKey("User");
                var result = cache.Get<User>(key);
                if (result != null)
                {
                    emailStorage = result.Email.ToList().FirstOrDefault();
                }
                else
                {
                    var state = await authenticationStateProvider.GetAuthenticationStateAsync();
                    if (!state.User.Identity.IsAuthenticated)
                    {
                        navigationManager.NavigateTo("/account/signin?returnUrl=" + System.Net.WebUtility.UrlEncode(new Uri(navigationManager.Uri).PathAndQuery));
                    }
                    else
                    {
                        emailStorage = state.User.Identities.FirstOrDefault().Name;
                    }
                }
            }


            UserDTO userData = new UserDTO();
            var UserData = await UserDataQueries.GetUserDataAsync(emailStorage);
            if (UserData != null)
            {
                codigo = UserData.Id;
                wallet = UserData.wallet.Trim();

                var packagesTotal = await PackageMontoDataQueries.TotalPackageDataAsync(UserData.Id);
                if (packagesTotal != null && packagesTotal.PackMonto > 0)
                {
                    packages = packagesTotal.PackMonto.ToString();
                }
            }


            await JS.InvokeVoidAsync("mostrar");

            resolucion = await JS.InvokeAsync<string>("resolucion");

            StateHasChanged();
        }
    }
}


