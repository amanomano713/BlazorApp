@page "/registro"
@using AutoMapper
@using BlazorApp.Components
@using BlazorApp.DataAcess.Infraestructure.Abstractions
@using BlazorApp.Entities.User
@using BlazorApp.Models
@using System.Text.RegularExpressions
@inject AuthenticationStateProvider authenticationStateProvider
@inject ILocalStorageService _localStorageService
@inject NavigationManager navigationManager
@inject IAccountService AccountService
@inject IUserDataRepository UserDataRepository
@inject IUserDataQueries UserDataQueries
@inject IMapper mapper

<div class="panel-body">
    <h2><i class="icon-edit-sign teal"></i> REGISTRO</h2>
    <p>
        Crea una cuenta para administrar todo lo que haces con ClipOne, desde tus preferencias de compra hasta tu actividad en ClipOne.
    </p>
    @if (displayUserAddedToDB)
    {
        <div class="row bg-success text-white" style="margin-top:10px; height:40px">
            <label class="p-2">Datos de Usuario agregado a la base de datos... </label>
        </div>
    }
     @if (displayUpdateUserToDB)
    {
        <div class="row bg-success text-white" style="margin-top:10px; height:40px">
            <label class="p-2">Actualización correcta de datos en la base de datos... </label>
        </div>
    }
    <hr>
    <EditForm Model="@AccountModel" OnSubmit="@SubmitEventHandler">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-md-6">
                <div class="form-group" style="margin-top:10px">
                    <label class="control-label">
                        <label for="Name">Nombre #</label>
                    </label>
                    <input type="text" class="form-input" id="Name" @bind-value="@AccountModel.name" placeholder="Insertar tu nombre..." />
                    <ValidationMessage For="@(()=>AccountModel.name)" />
                </div>
                <div class="form-group" style="margin-top:10px">
                    <label class="control-label">
                        <label for="Surname">Apellido #</label>
                    </label>
                    <input type="text" class="form-input" id="Surname" @bind-value="@AccountModel.surname" placeholder="Insertar tu nombre..." />
                    <ValidationMessage For="@(()=>AccountModel.surname)" />
                </div>
                <fieldset disabled>
                    <div class="form-group" style="margin-top:10px">
                        <label class="control-label">
                            Dirección de Correo Electrónico # <span class="symbol required"></span>
                        </label>
                        <input type="email" placeholder="Inserta tu Email" class="form-control" id="email" name="email" value=@email>
                    </div>
                </fieldset>
                <div class="row" style="margin-top:10px">
                    <div class="col-md-12">
                        <label for="lastName">Fecha de Nacimiento #</label>
                        <input type="date" class="form-input" id="department" @bind-value="@AccountModel.dateOfbirth" />
                    </div>
                </div>
                <div class="form-group" style="margin-top:10px">
                    <label class="control-label">
                        <label for="Mobile">Mobile #</label>
                    </label>
                    <input type="text" class="form-input" id="mobile" @bind-value="@AccountModel.mobile" placeholder="Insertar tu Celular o Móvil..." />
                    <ValidationMessage For="@(()=>AccountModel.mobile)" />
                </div>
                <div class="form-group" style="margin-top:10px">
                    <label class="control-label">
                        <label for="Wallet">Wallet BTC #</label>
                    </label>
                    <input type="text" class="form-input" id="wallet" @bind-value="@AccountModel.wallet" placeholder="Insertar tu Wallet BTC..." />
                    <ValidationMessage For="@(()=>AccountModel.wallet)" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label class="control-label">
                        Género <span class="symbol required"></span>
                    </label>
                    <div>
                        <label class="radio-inline">
                            <input type="radio" class="grey" value="" name="gender" id="gender_female">
                            Mujer
                        </label>
                        <label class="radio-inline">
                            <input type="radio" class="grey" value="" name="gender" id="gender_male">
                            Hombre
                        </label>
                    </div>
                </div>
                <div class="row" style="margin-top:10px">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label class="control-label">
                                Postal <span class="symbol required"></span>
                            </label>
                            <input class="form-input" type="text" name="zipcode" id="zipcode" @bind-value="@AccountModel.zipcode" placeholder="Insertar tu Código Postal...">
                        </div>
                    </div>
                    <div class="col-md-8">
                        <div class="form-group">
                            <label class="control-label">
                                Ciudad <span class="symbol required"></span>
                            </label>
                            <input type="text" class="form-input" name="city" id="city" @bind-value="@AccountModel.city" placeholder="Insertar tu Ciudad...">
                        </div>
                    </div>
                </div>
                <div class="form-group" style="margin-top:10px">
                    <hr>
                    <label class="control-label">
                        <strong>Regístrese para recibir correos electrónicos de Clip-One</strong> <span class="symbol required"></span>
                    </label>
                    <p>
                        ¿Te gustaría revisar los correos electrónicos de Clip-One?
                    </p>
                    <div>
                        <label class="radio-inline">
                            <input type="radio" class="grey" value="" name="newsletter">
                            No
                        </label>
                        <label class="radio-inline">
                            <input type="radio" class="grey" value="" name="newsletter">
                            Yes
                        </label>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-8">
                <p>
                    Al hacer clic en REGISTRARSE, acepta la Política y los Términos y Condiciones.
                </p>
            </div>
            @if (displayEdittUserToDB == false)
            {
                <div class="col-md-4">
                    <button class="btn btn-yellow btn-block" type="submit">
                        OK <i class="icon-circle-arrow-right"></i>
                    </button>
                </div>
            }
            @if (displayEdittUserToDB == true)
            {
                <div class="col-md-4">
                    <button class="btn btn-yellow btn-block" type="submit">
                        Actualizar <i class="icon-circle-arrow-right"></i>
                    </button>
                </div>
            }
        </div>
    </EditForm>

</div>

@code {
    public UserDTO AccountModel = new UserDTO();
    EditContext context;
    private string? email;
    private string _userKey = "key";
    bool displayValidationErrorMessages = false;
    bool displayUserAddedToDB = false;
    bool displayEdittUserToDB = false;
    bool displayUpdateUserToDB = false;

    protected override Task OnInitializedAsync()
    {

        context = new EditContext(AccountModel);
        return base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var emailStorage = await _localStorageService.GetItem<String>(_userKey);

        if (firstRender)
        {

            if (string.IsNullOrEmpty(emailStorage))
            {
                var state = await authenticationStateProvider.GetAuthenticationStateAsync();
                if (!state.User.Identity.IsAuthenticated)
                {
                    navigationManager.NavigateTo("/account/signin?returnUrl=" + System.Net.WebUtility.UrlEncode(new Uri(navigationManager.Uri).PathAndQuery));
                }
                else
                {
                    email = state.User.Identities.FirstOrDefault().Name;
                }
            }
            else
            {
                UserDTO userData = new UserDTO();
                var UserData = await UserDataQueries.GetUserDataAsync(emailStorage);
                if (UserData != null)
                {
                    AccountModel.id = Regex.Replace(UserData.Id, @"\s", "");
                    AccountModel.name = Regex.Replace(UserData.name, @"\s", "");;
                    AccountModel.surname =Regex.Replace(UserData.surname, @"\s", "");;
                    AccountModel.city = UserData.city;
                    AccountModel.dateOfbirth = UserData.dateOfbirth;
                    AccountModel.email = UserData.email;
                    AccountModel.mobile = UserData.mobile;
                    AccountModel.wallet = UserData.wallet;
                    AccountModel.zipcode = UserData.zipcode;
                    displayEdittUserToDB = true;
                }


                email = emailStorage;
            }

            StateHasChanged();
        }
    }
    private async Task SubmitEventHandler(EditContext context)
    {
        try
        {
            var UserDTO = AccountModel;

            if (context.Validate())
            {

                if (displayEdittUserToDB)
                {
                    //update user
                    var userdata = mapper.Map<UserData>(UserDTO);

                     UserDataRepository.Update(userdata);

                    await UserDataRepository.UnitOfWork.SaveEntitiesAsync();

                    displayValidationErrorMessages = false;

                    displayUpdateUserToDB = true;

                    displayEdittUserToDB = false;
                }
                else
                {
                    //add user

                    Guid id = Guid.NewGuid();

                    UserDTO.id = id.ToString();

                    UserDTO.email = email;

                    var userdata = mapper.Map<UserData>(UserDTO);

                    var result = UserDataRepository.Add(userdata);

                    await UserDataRepository.UnitOfWork.SaveChangesAsync();

                    displayValidationErrorMessages = false;

                    displayUserAddedToDB = true;

                    displayEdittUserToDB = false;
                }

            }
            else
            {
                displayValidationErrorMessages = true;
                displayUserAddedToDB = false;
                displayEdittUserToDB = true;
            }
        }
        catch (Exception ex)
        {
            //AlertService.Error(ex.Message);


        }

        StateHasChanged();

    }

}

