@page "/registro"
@using AutoMapper
@using BlazorApp.Components
@using BlazorApp.DataAcess.Infraestructure.Abstractions
@using BlazorApp.Entities.User
@using BlazorApp.Handlers.Commands
@using BlazorApp.Models
@using System.Text.RegularExpressions
@using MediatR
@inject AuthenticationStateProvider authenticationStateProvider
@inject ILocalStorageService _localStorageService
@inject NavigationManager navigationManager
@inject IAccountService AccountService
@inject IUserDataRepository UserDataRepository
@inject IUserDataQueries UserDataQueries
@inject IMapper mapper
@inject IMediator mediator

<div class="panel-body">
@*    <img src="/Images/Bitcoin.jpg" asp-append-version="true" width="1200px" />*@
    <h2><i class="icon-edit-sign teal"></i> REGISTRO</h2>
    <p>
       <strong style="color:black;font-size:medium">Crea una cuenta para administrar todo lo que haces con ClipOne, desde tus preferencias de compra hasta tu actividad en ClipOne.</strong>
    </p>
    @if (displayUpdateUserToDB == true)
    {
        <div class="row bg-success text-white" style="margin-top:10px; height:40px">
            <label class="p-2">Actualización correcta de datos en la base de datos... </label>
        </div>
    }
    <hr>
    <EditForm Model="@AccountModel" OnSubmit="@SubmitCreate">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-md-6">
                <div class="form-group" style="margin-top:10px">
                    <label class="control-label">
                        <strong style="color:black;font-size:medium">Nombre #</strong>
                    </label>
                    <input type="text" class="form-input" id="Name" @oninput="ValueChanged" @bind-value="@AccountModel.name" placeholder="Insertar tu nombre..."/>
                    <ValidationMessage For="@(()=>AccountModel.name)" />
                </div>
                <div class="form-group" style="margin-top:10px">
                        <strong style="color:black;font-size:medium">Apellido #</strong>
                    <input type="text" class="form-input" id="Surname" @oninput="ValueChanged" @bind-value="@AccountModel.surname" placeholder="Insertar tu nombre..." />
                    <ValidationMessage For="@(()=>AccountModel.surname)" />
                </div>
                <fieldset disabled>
                    <div class="form-group" style="margin-top:10px">
                             <strong style="color:black;font-size:medium">Dirección de Correo Electrónico # </strong>
                        <input type="email" placeholder="Inserta tu Email" class="form-control" id="email" name="email" value=@email>
                    </div>
                </fieldset>
                <div class="row" style="margin-top:10px">
                    <div class="col-md-12">
                        <strong style="color:black;font-size:medium">Fecha de Nacimiento #</strong>
                        <input type="date" class="form-input" id="department" @oninput="ValueChanged" @bind-value="@AccountModel.dateOfbirth" />
                    </div>
                </div>
                <div class="form-group" style="margin-top:10px">
                    <strong style="color:black;font-size:medium">Mobile #</strong>
                    <input type="text" class="form-input" id="mobile" @oninput="ValueChanged" @bind-value="@AccountModel.mobile" placeholder="Insertar tu Celular o Móvil..." />
                    <ValidationMessage For="@(()=>AccountModel.mobile)" />
                </div>
                <div class="form-group" style="margin-top:10px">
                        <strong style="color:black;font-size:medium">Wallet BTC #</strong>
                    <input type="text" class="form-input" id="wallet" @oninput="ValueChanged" @bind-value="@AccountModel.wallet" placeholder="Insertar tu Wallet BTC..." />
                    <ValidationMessage For="@(()=>AccountModel.wallet)" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="row" style="margin-top:10px">
@*                    <div class="col-md-4">
                        <div class="form-group">
                            <label class="control-label">
                                Postal <span class="symbol required"></span>
                            </label>
                            <input class="form-input" type="text" name="zipcode" id="zipcode" @oninput="ValueChanged" @bind-value="@AccountModel.zipcode" placeholder="Insertar tu Código Postal...">
                        </div>
                    </div>*@
                    <div class="col-md-8">
                        <div class="form-group">
                                <strong style="color:black;font-size:medium">Ciudad</strong>
                            <input type="text" class="form-input" name="city" id="city" @oninput="ValueChanged" @bind-value="@AccountModel.city" placeholder="Insertar tu Ciudad...">
                        </div>
                    </div>
                </div>
                @*<div class="form-group" style="margin-top:10px">
                    <hr>
                    <label class="control-label">
                        <strong>Regístrese para recibir correos electrónicos de Clip-One</strong> <span class="symbol required"></span>
                    </label>
                    <p>
                        ¿Te gustaría revisar los correos electrónicos de Clip-One?
                    </p>
                    <div>
                        <label class="radio-inline">
                            <input type="radio" class="grey" value="" name="newsletter">
                            No
                        </label>
                        <label class="radio-inline">
                            <input type="radio" class="grey" value="" name="newsletter">
                            Yes
                        </label>
                    </div>
                </div>
*@            </div>
        </div>
        <div class="row">
            <div class="col-md-8" style="margin-top:20px">
                <p>
                     <strong style="color:black;font-size:large">Al hacer clic en REGISTRARSE, Acepto Términos y Condiciones de Uso y Política de Privacidad.</strong>
                </p>
            </div>
            @if (displayEditUserToDB == false)
            {
                <div class="col-md-4">
                    <button class="btn btn-yellow btn-block" type="submit">
                        OK <i class="icon-circle-arrow-right"></i>
                    </button>
                </div>
            }
            @if (displayEditUserToDB == true)
            {
                <div class="col-md-4">
                    <button class="btn btn-yellow btn-block" type="submit">
                        Actualizar <i class="icon-circle-arrow-right"></i>
                    </button>
                </div>
            }
        </div>
    </EditForm>

</div>

@code {

    public UserDTO AccountModel = new UserDTO();
    EditContext context;
    private string? email;
    private string _userKey = "key";
    bool displayValidationErrorMessages = false;

    bool displayEditUserToDB = false;
    bool displayUpdateUserToDB = false;
    public UserDTO userData = new UserDTO();
    bool OnFieldChanged = false;

    protected override void OnInitialized()
    {
        context = new EditContext(AccountModel);    
        base.OnInitialized();
    }

    private void ValueChanged(ChangeEventArgs args)
    {
        OnFieldChanged = true;
    }

    private async void SubmitCreate(EditContext context)
    {

        if (displayEditUserToDB == true)
        {
            if (context.Validate() && OnFieldChanged == true)
            {
                var requestModel = mapper.Map<UpdateUserDataCommand>(AccountModel);

                var response = await mediator.Send(requestModel);

                var result = response;

                displayValidationErrorMessages = false;

                displayUpdateUserToDB = true;
            }
            else
            {
                displayValidationErrorMessages = true;

                displayEditUserToDB = true;

                displayUpdateUserToDB = false;
            }

        }

        if (displayEditUserToDB == false)
        {
            if (context.Validate())
            {
                Guid id = Guid.NewGuid();

                AccountModel.id = id.ToString();

                AccountModel.email = email;

                var requestModel = mapper.Map<CreateUserDataCommand>(AccountModel);

                var response = await mediator.Send(requestModel);

                displayValidationErrorMessages = false;

                navigationManager.NavigateTo("Index");
            }
            else
            {
                displayValidationErrorMessages = true;

                displayEditUserToDB = false;

                displayUpdateUserToDB = false;
            }
        }
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var emailStorage = await _localStorageService.GetItem<String>(_userKey);

        if (firstRender)
        {
            if (string.IsNullOrEmpty(emailStorage))
            {
                var state = await authenticationStateProvider.GetAuthenticationStateAsync();
                if (!state.User.Identity.IsAuthenticated)
                {
                    navigationManager.NavigateTo("/account/signin?returnUrl=" + System.Net.WebUtility.UrlEncode(new Uri(navigationManager.Uri).PathAndQuery));
                }
                else
                {
                    email = state.User.Identities.FirstOrDefault().Name;
                }
            }
            else
            {
                UserDTO userData = new UserDTO();
                var UserData = await UserDataQueries.GetUserDataAsync(emailStorage);
                if (UserData != null)
                {
                    AccountModel.id = UserData.Id;
                    AccountModel.name = UserData.name.Trim();
                    AccountModel.city = UserData.city == null ? string.Empty : UserData.city.Trim();
                    AccountModel.dateOfbirth = UserData.dateOfbirth;
                    AccountModel.email = UserData.email.Trim();
                    AccountModel.mobile = UserData.mobile.Trim();
                    AccountModel.wallet = UserData.wallet.Trim();
                    //AccountModel.zipcode = UserData.zipcode == null ? string.Empty : UserData.zipcode.Trim();
                    AccountModel.surname = UserData.surname.Trim();
                    displayEditUserToDB = true;
                }
                email = emailStorage;
            }
            StateHasChanged();
        }
    }
}
