@page "/paquete"
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@inject ILocalStorageService _localStorageService
@using Microsoft.JSInterop
@inject IJSRuntime JS

@inject IUserDataQueries UserDataQueries

<div class="panel-body">
    <h2><i class="icon-edit-sign teal"></i>COMPRA de PAQUETES</h2>
    <p>
        <strong style="color:black;font-size:medium">Crea una cuenta para administrar todo lo que haces con ClipOne, desde tus preferencias de compra hasta tu actividad en ClipOne</strong>
    </p>
    <hr>
    <div class="modal" id="modal-id" >
    <a href="#close" class="modal-overlay" aria-label="Close"></a>
    <div class="modal-container">
        <div class="modal-header">
            <a href="#close" class="btn btn-clear float-right" aria-label="Close"></a>
            <div class="modal-title h5">Modal title</div>
        </div>
        <div class="modal-body">
            <div class="content">
                <!-- content here -->
            </div>
        </div>
        <div class="modal-footer">
            ...
        </div>
    </div>
</div>
</div>


<div class="row col-md-12">
    <div class="col-md-2">
        <div class="card">
            <div class="card-image">
                <img src="img/paquete.png" class="img-responsive">
            </div>
            <div class="card-header">
                <div class="card-title h2">BTC</div>
            </div>
            <div class="card-body">
                Paquete Estrella 10$.
            </div>
            <div class="card-footer">
                <button @onclick="async () => await CreatePackaqes(this._idCod)" class="btn btn-primary">Comprar</button>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card">
            <div class="card-image">
                <img src="img/paquete.png" class="img-responsive">
            </div>
            <div class="card-header">
                <div class="card-title h2">BTC</div>
            </div>
            <div class="card-body">
                Paquete Estrella 10$.
            </div>
            <div class="card-footer">
                <button @onclick="async () => await CreatePackaqes(this._idCod20)" class="btn btn-primary">Comprar</button>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card">
            <div class="card-image">
                <img src="img/paquete.png" class="img-responsive">
            </div>
            <div class="card-header">
                <div class="card-title h2">BTC</div>
            </div>
            <div class="card-body">
                Paquete Estrella 10$.
            </div>
            <div class="card-footer">
                <button class="btn btn-primary">Comprar</button>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card">
            <div class="card-image">
                <img src="img/paquete.png" class="img-responsive">
            </div>
            <div class="card-header">
                <div class="card-title h2">BTC</div>
            </div>
            <div class="card-body">
                Paquete Estrella 10$.
            </div>
            <div class="card-footer">
                <button class="btn btn-primary">Comprar</button>
            </div>
        </div>
    </div>
</div>

<hr>
<div class="row col-md-12">
    <div class="col-md-2">
        <div class="card">
            <div class="card-image">
                <img src="img/paquete.png" class="img-responsive">
            </div>
            <div class="card-header">
                <div class="card-title h2">BTC</div>
            </div>
            <div class="card-body">
                Paquete Estrella 10$.
            </div>
            <div class="card-footer">
                <button class="btn btn-primary">Comprar</button>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card">
            <div class="card-image">
                <img src="img/paquete.png" class="img-responsive">
            </div>
            <div class="card-header">
                <div class="card-title h2">BTC</div>
            </div>
            <div class="card-body">
                Paquete Estrella 10$.
            </div>
            <div class="card-footer">
                <button class="btn btn-primary">Comprar</button>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card">
            <div class="card-image">
                <img src="img/paquete.png" class="img-responsive">
            </div>
            <div class="card-header">
                <div class="card-title h2">BTC</div>
            </div>
            <div class="card-body">
                Paquete Estrella 10$.
            </div>
            <div class="card-footer">
                <button class="btn btn-primary">Comprar</button>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card">
            <div class="card-image">
                <img src="img/paquete.png" class="img-responsive">
            </div>
            <div class="card-header">
                <div class="card-title h2">BTC</div>
            </div>
            <div class="card-body">
                Paquete Estrella 10$.
            </div>
            <div class="card-footer">
                <button class="btn btn-primary">Comprar</button>
            </div>
        </div>
    </div>
</div>



@code {
    private string? email;
    private string _userKey = "key";
    private string? id;
    private bool result;

    private string? _idCod = "10010";
    private string? _idCod20 = "10020";

    private async Task CreatePackaqes(string? _idCod)
    {
        var emailStorage = await _localStorageService.GetItem<String>(_userKey);
        UserDTO userData = new UserDTO();
        var UserData = await UserDataQueries.GetUserDataAsync(emailStorage);
        if (UserData != null)
        {
            id = UserData.Id;
        }
        await JS.InvokeVoidAsync("CreatePackages", _idCod, id);

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var emailStorage = await _localStorageService.GetItem<String>(_userKey);
            if (string.IsNullOrEmpty(emailStorage))
            {
                var state = await authenticationStateProvider.GetAuthenticationStateAsync();
                if (!state.User.Identity.IsAuthenticated)
                {
                    navigationManager.NavigateTo("/account/signin?returnUrl=" + System.Net.WebUtility.UrlEncode(new Uri(navigationManager.Uri).PathAndQuery));
                }
            }
            else
            {
                email = emailStorage;

            }

            StateHasChanged();
        }
    }
}
