@page "/transferencia"
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@inject ILocalStorageService _localStorageService
@inject IUserDataQueries UserDataQueries
@using Microsoft.JSInterop;
@inject IJSRuntime JS;
@using Blazorise;
@using BlazorApp.Encryptor;
@inject IAfiliadoDataQueries AfiliadoDataQueries

<div class="panel-body">
    <h2><i class="icon-edit-sign teal"></i> TRANSFERENCIA INTERNA </h2>
    <p>
        <strong style="color:black;font-size:medium">Crea una cuenta para administrar todo lo que haces con ClipOne, desde tus preferencias de compra hasta tu actividad en ClipOne</strong>
    </p>
    @if (displayErrorTransfer == true)
    {
        <div class="row bg-warning text-white" style="margin-top:10px; height:40px">
            <label class="p-2">Error el Monto a transferir no puede ser mayor al saldo disponible... </label>
        </div>
    }

    @if (displayErrorAfiliado == true)
    {
        <div class="row bg-warning text-white" style="margin-top:10px; height:40px">
            <label class="p-2">Error Afiliado no existe en la base de datos... </label>
        </div>
    }
     @if (displayErrorNoValida == true)
    {
        <div class="row bg-warning text-white" style="margin-top:10px; height:40px">
            <label class="p-2">Error Transferencia No valida... </label>
        </div>
    }
    <hr>
    <div class="modal" id="modal-id">
        <a href="#close" class="modal-overlay" aria-label="Close"></a>
        <div class="modal-container">
            <div class="modal-header">
                <a href="#Close" class="btn btn-clear float-right" aria-label="Close"></a>
                <div class="modal-title h5">Compra de Paquete</div>
            </div>
            <div class="modal-body">
                <div class="content">
                    <strong style="color:black;font-size:medium">Proceso de Compra del Paquete: Exitosa.</strong>

                </div>
            </div>
        </div>
    </div>
    <EditForm Model="@TransferirModel" OnSubmit="@SubmitTransferir">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-md-6">
                <div class="form-group" style="margin-top:10px">
                    <h1><strong style="color:black;font-size:x-large">Código Afiliado #</strong></h1>
                    <Blazorise.InputMask id="wallet" name="wallet" disabled @bind-Value="@TransferirModel.Id" class="form-control" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <fieldset disabled>
                    <div class="form-group" style="margin-top:10px">
                        <h1><strong style="color:black;font-size:x-large">Saldo #</strong></h1>
                        <Blazorise.InputMask id="saldo" name="saldo" disabled @bind-Value="@TransferirModel.Saldo" class="form-control" />
                    </div>
                </fieldset>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group" style="margin-top:10px">
                    <h1><strong style="color:black;font-size:x-large">Monto a Transferir #</strong></h1>
                    <Blazorise.InputMask id="transferir" name="transferir" @bind-value="@TransferirModel.Transferir" Mask="9999" class="form-control" />
                    <ValidationMessage For="@(()=>TransferirModel.Transferir)" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group" style="margin-top:10px">
                    <h1><strong style="color:black;font-size:x-large">Afiliado Destino #</strong></h1>
                    <Blazorise.InputMask id="afiliado" name="afiliado" @bind-Value="@TransferirModel.Afiliado" class="form-control" placeholder="Insertar el código del afiliado..." />
                    <ValidationMessage For="@(()=>TransferirModel.Afiliado)" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-8" style="margin-top:25px">
                <p>
                    <h5><strong style="color:black;font-size:large">Al hacer clic en RETIRAR, Asegurese que el WALLET es el suyo.</strong></h5>
                </p>
            </div>
            <div class="col-md-4" style="margin-top:25px">
                <button class="btn btn-yellow btn-block" type="submit">
                    Transferir <i class="icon-circle-arrow-right"></i>
                </button>
            </div>
        </div>
    </EditForm>
</div>

@code {

    //Obtener el saldo y servicio de transferencia

    bool displayErrorNoValida = false;
    bool displayErrorAfiliado = false;
    bool displayErrorTransfer = false;
    bool displayValidationErrorMessages = false;
    public TransferirDTO TransferirModel = new TransferirDTO();
    private string? email;
    private string _userKey = "key";
    private IJSRuntime? _jsRuntime;

    EditContext? context;
    private string? Id;
    private string? Afiliado;
    private string? Montotransfer;


    protected override void OnInitialized()
    {
        context = new EditContext(TransferirModel);
        base.OnInitialized();
    }

    private async void SubmitTransferir(EditContext context)
    {

        string? Montoatransferir = TransferirModel.Transferir.Replace("_",string.Empty);

        var Monto = System.Convert.ToInt32(TransferirModel.Saldo);

        var Transferir = System.Convert.ToInt32(Montoatransferir);

        if (Transferir > Monto)
        {
            displayErrorNoValida = false;
            displayErrorAfiliado = false;
            displayErrorTransfer = true;
        }
        else
        {
            var emailStorage = await _localStorageService.GetItem<String>(_userKey);
            UserDTO userData = new UserDTO();

            if (context.Validate())
            {
                string? afiliado = TransferirModel.Afiliado;
                var TransferData = await AfiliadoDataQueries.GetAfiliadoDataAsync(afiliado);
                if (TransferData == null)
                {
                    displayErrorAfiliado = true;
                    displayErrorTransfer = false;
                    displayErrorNoValida = false;
                }
                else
                {
                    var UserData = await UserDataQueries.GetUserDataAsync(emailStorage);

                    if (UserData != null)
                    {
                        if (UserData.Id == afiliado)
                        {
                            displayErrorAfiliado = false;
                            displayErrorTransfer = false;
                            displayErrorNoValida = true;
                        }
                        else
                        {
                            var transferData = new TransfDTO{
                                 Id = UserData.Id,
                                 Afiliado = afiliado,
                                 Monto = Montoatransferir
                            };

                            await CreateTransfer(transferData);
                        }
                    }                    
                }
            }
            else
            {
                displayValidationErrorMessages = true;
                displayErrorTransfer = false;
                displayErrorAfiliado = false;
                displayErrorNoValida = false;
            }

               StateHasChanged();
        }

    }

    private async Task CreateTransfer(TransfDTO transfData)
    {
        displayValidationErrorMessages = false;

        var cadena = transfData.Id + "|" + transfData.Afiliado + "|" + transfData.Monto;

        BlazorApp.Encryptor.encriptador clave = new BlazorApp.Encryptor.encriptador();

        var result = clave.Encriptacion(cadena);

        await JS.InvokeVoidAsync("CreateTransfer", result);

        displayErrorTransfer = false;

        displayErrorAfiliado = false;

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var emailStorage = await _localStorageService.GetItem<String>(_userKey);
            if (string.IsNullOrEmpty(emailStorage))
            {
                var state = await authenticationStateProvider.GetAuthenticationStateAsync();
                if (!state.User.Identity.IsAuthenticated)
                {
                    navigationManager.NavigateTo("/account/signin?returnUrl=" + System.Net.WebUtility.UrlEncode(new Uri(navigationManager.Uri).PathAndQuery));
                }
                else
                {
                    email = state.User.Identities.FirstOrDefault().Name;
                }
            }
            else
            {
                var UserData = await UserDataQueries.GetUserDataAsync(emailStorage);
                if (UserData != null)
                {
                    TransferirModel.Id = UserData.Id;
                    TransferirModel.Wallet = UserData.wallet.Trim();
                    TransferirModel.Saldo = "300";
                }
            }
            StateHasChanged();
        }
    }
}