@page "/transferencia"
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@inject ILocalStorageService _localStorageService
@inject IUserDataQueries UserDataQueries
@using Microsoft.JSInterop;
@using Blazorise;

<div class="panel-body">
    <h2><i class="icon-edit-sign teal"></i> TRANSFERENCIA INTERNA </h2>
    <p>
        <strong style="color:black;font-size:medium">Crea una cuenta para administrar todo lo que haces con ClipOne, desde tus preferencias de compra hasta tu actividad en ClipOne</strong>
    </p>
    <hr>
    <EditForm Model="@TransferirModel" OnSubmit="@SubmitTransferir">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-md-6">
                <div class="form-group" style="margin-top:10px">
                    <h1><strong style="color:black;font-size:x-large">Wallet</strong></h1>
                     <Blazorise.InputMask id="wallet" name="wallet" disabled @bind-Value="@TransferirModel.Wallet" class="form-control" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <fieldset disabled>
                    <div class="form-group" style="margin-top:10px">
                        <h1><strong style="color:black;font-size:x-large">Disponible</strong></h1>
                        <Blazorise.InputMask id="saldo" name="saldo" disabled @bind-Value="@TransferirModel.Saldo" class="form-control" />
                    </div>
                </fieldset>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group" style="margin-top:10px">
                    <h1><strong style="color:black;font-size:x-large">Monto a Transferir #</strong></h1>
                    <Blazorise.InputMask id="transferir" name="transferir" @bind-value="@TransferirModel.Transferir" @oninput="ValueChanged" class="form-control" data-mask="0000" placeholder="Insertar el monto a transferir..."/>
                    <ValidationMessage For="@(()=>TransferirModel.Transferir)" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group" style="margin-top:10px">
                    <h1><strong style="color:black;font-size:x-large">Afiliado Destino #</strong></h1>
                    <Blazorise.InputMask id="afiliado" name="afiliado" @bind-Value="@TransferirModel.Afiliado" @oninput="ValueChanged" class="form-control" placeholder="Insertar el código del afiliado..."/>
                    <ValidationMessage For="@(()=>TransferirModel.Afiliado)" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-8" style="margin-top:25px">
                <p>
                    <h5><strong style="color:black;font-size:large">Al hacer clic en RETIRAR, Asegurese que el WALLET es el suyo.</strong></h5>
                </p>
            </div>
            <div class="col-md-4" style="margin-top:25px">
                <button class="btn btn-yellow btn-block" type="submit">
                    Transferir <i class="icon-circle-arrow-right"></i>
                </button>
            </div>
        </div>
    </EditForm>
</div>

@code {

    //Obtener el saldo y servicio de transferencia

    bool displayValidationErrorMessages = false;
    public TransferirDTO TransferirModel = new TransferirDTO();
    private string? email;
    private string _userKey = "key";
    private IJSRuntime? _jsRuntime;
    private string? wallet;
    bool OnFieldChanged = false;
    EditContext? context;

    protected override void OnInitialized()
    {
        context = new EditContext(TransferirModel);
        base.OnInitialized();
    }

    private void ValueChanged(ChangeEventArgs args)
    {
        OnFieldChanged = true;
    }

    private async void SubmitTransferir(EditContext context)
    {
        if (context.Validate() && OnFieldChanged == true)
        {
            displayValidationErrorMessages = false;
        }
        else
        {
            displayValidationErrorMessages = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var emailStorage = await _localStorageService.GetItem<String>(_userKey);
            if (string.IsNullOrEmpty(emailStorage))
            {
                var state = await authenticationStateProvider.GetAuthenticationStateAsync();
                if (!state.User.Identity.IsAuthenticated)
                {
                    navigationManager.NavigateTo("/account/signin?returnUrl=" + System.Net.WebUtility.UrlEncode(new Uri(navigationManager.Uri).PathAndQuery));
                }
                else
                {
                    email = state.User.Identities.FirstOrDefault().Name;
                }
            }
            else
            {
                var UserData = await UserDataQueries.GetUserDataAsync(emailStorage);
                if (UserData != null)
                {
                    TransferirModel.Id = UserData.Id;
                    TransferirModel.Wallet = UserData.wallet.Trim();
                    TransferirModel.Saldo = "3000";
                }
            }
            StateHasChanged();
        }
    }
}