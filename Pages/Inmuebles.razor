@page "/inmuebles"
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@inject ILocalStorageService _localStorageService
@using BlazorApp.Encryptor
@using Blazorise
@using Microsoft.JSInterop
@inject IJSRuntime JS
@inject IEncryptor IEncryptor
@inject IUserDataQueries UserDataQueries
<body>
    <div class="welcome"></div>
    <div class="panel-body">
        <Blazorise.Container Breakpoint="Breakpoint.Desktop">
            <Blazorise.Alert Color="Color.Primary" Visible="true">
                <h3><i class="icon-edit-sign teal"></i>SUBASTAS de INMUEBLES</h3>
                <p>
                    <strong style="color:black;font-size:medium">Crea una cuenta para administrar todo lo que haces con ClipOne, desde tus preferencias de compra hasta tu actividad en ClipOne</strong>
                </p>
            </Blazorise.Alert>
        </Blazorise.Container>
        <hr>
        <TemplateSesion></TemplateSesion>
        <ComponentPujar modalVisible=@visible modalDescripcion=@Descripcion modalPuja=@puja modelIdAfiliado=@IdAfiliado></ComponentPujar>
        <div class="modal" id="modal-id">
            <a href="#close" class="modal-overlay" aria-label="Close"></a>
            <div class="modal-container">
                <div class="modal-header">
                    <a href="#Close" class="btn btn-clear float-right" aria-label="Close"></a>
                    <div class="modal-title h5">Inversión Inmuebles</div>
                </div>
                <div class="modal-body">
                    <div class="content">
                        <strong style="color:black;font-size:medium">Proceso de Puja Exitosa.</strong>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row col-md-12">
        <div class="col-md-4">
            <div class="card">
                <div class="card-image">
                    <img src="img/miami.png" class="img-responsive">
                </div>
                <div class="card-header">
                    <div class="card-title h2">@this.descripcionPuj01</div>
                </div>
                <div class="card-body">
                    Precio $ @this.montoPuj01
                </div>
                <div class="card-footer">
                   <button  class="btn btn-primary" @onclick="async () => await ShowModal(this._idPuj01,this.descripcionPuj01)">Pujar</button>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-image">
                    <img src="img/miami1.png" class="img-responsive">
                </div>
                <div class="card-header">
                    <div class="card-title h2">Apartamento Miami</div>
                </div>
                <div class="card-body">
                    Precio 800.000$.
                </div>
                <div class="card-footer">
@*                    <button @onclick="async () => await CreatePackaqes(this._idCod20)" class="btn btn-primary">Pujar</button>
*@                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-image">
                    <img src="img//miami3.png" class="img-responsive">
                </div>
                <div class="card-header">
                    <div class="card-title h2">Apartamento en la Florida</div>
                </div>
                <div class="card-body">
                    Precio 1.000.000$.
                </div>
                <div class="card-footer">
 @*                   <button @onclick="async () => await CreatePackaqes(this._idCod100)" class="btn btn-primary">Pujar</button>
 *@               </div>
            </div>
        </div>
    </div>
    <hr>
    <div class="row col-md-12">
        <div class="col-md-4">
            <div class="card">
                <div class="card-image">
                    <img src="img/miami.png" class="img-responsive">
                </div>
                <div class="card-header">
                    <div class="card-title h2">Apartamento Miami</div>
                </div>
                <div class="card-body">
                    Precio 500.000$.
                </div>
                <div class="card-footer">
@*                    <button @onclick="async () => await CreatePackaqes(this._idCod)" class="btn btn-primary">Pujar</button>
*@                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-image">
                    <img src="img/miami1.png" class="img-responsive">
                </div>
                <div class="card-header">
                    <div class="card-title h2">Apartamento Miami</div>
                </div>
                <div class="card-body">
                    Precio 800.000$.
                </div>
                <div class="card-footer">
@*                    <button @onclick="async () => await CreatePackaqes(this._idCod20)" class="btn btn-primary">Pujar</button>
*@                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-image">
                    <img src="img//miami3.png" class="img-responsive">
                </div>
                <div class="card-header">
                    <div class="card-title h2">Apartamento en la Florida</div>
                </div>
                <div class="card-body">
                    Precio 1.000.000$.
                </div>
                <div class="card-footer">
@*                    <button @onclick="async () => await CreatePackaqes(this._idCod100)" class="btn btn-primary">Pujar</button>
*@                </div>
            </div>
        </div>
    </div>
    <hr>
    <div class="row col-md-12">
        <div class="col-md-4">
            <div class="card">
                <div class="card-image">
                    <img src="img/miami.png" class="img-responsive">
                </div>
                <div class="card-header">
                    <div class="card-title h2">Apartamento Miami</div>
                </div>
                <div class="card-body">
                    Precio 500.000$.
                </div>
                <div class="card-footer">
@*                    <button @onclick="async () => await CreatePackaqes(this._idCod)" class="btn btn-primary">Pujar</button>
*@                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-image">
                    <img src="img/miami1.png" class="img-responsive">
                </div>
                <div class="card-header">
                    <div class="card-title h2">Apartamento Miami</div>
                </div>
                <div class="card-body">
                    Precio 800.000$.
                </div>
                <div class="card-footer">
 @*                   <button @onclick="async () => await CreatePackaqes(this._idCod20)" class="btn btn-primary">Pujar</button>
*@                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-image">
                    <img src="img//miami3.png" class="img-responsive">
                </div>
                <div class="card-header">
                    <div class="card-title h2">Apartamento en la Florida</div>
                </div>
                <div class="card-body">
                    Precio 1.000.000$.
                </div>
                <div class="card-footer">
@*                    <button @onclick="async () => await CreatePackaqes(this._idCod100)" class="btn btn-primary">Pujar</button>
 *@               </div>
            </div>
        </div>
    </div>

</body>
@code {

    private bool visible = false;
    private string? Descripcion ;
    private string? email;
    private string _userKey = "key";
    private string? IdAfiliado;
    private bool result;

    private string? _idPuj01 = "Puja01";
    private string? _idPuj02 = "Puja02";
    private string? _idPuj03 = "Puja03";
    private string? _idPuj04 = "Puja04";
    private string? _idPuj05 = "Puja05";
    private string? _idPuj06 = "Puja06";
    private string? _idPuj07 = "Puja07";
    private string? _idPuj08 = "Puja08";
    private string? _idPuj09 = "Puja09";


    private string? montoPuj01 = "500.000";
    private string? montoPuj02 = "500.000";
    private string? montoPuj03 = "500.000";
    private string? montoPuj04 = "500.000";
    private string? montoPuj05 = "500.000";
    private string? montoPuj06 = "500.000";
    private string? montoPuj07 = "500.000";
    private string? montoPuj08 = "500.000";
    private string? montoPuj09 = "500.000";

    private string? descripcionPuj01 = "Apartamento Miami";
    private string? descripcionPuj02 = "Apartamento Miami";
    private string? descripcionPuj03 = "Apartamento Miami";
    private string? descripcionPuj04 = "Apartamento Miami";
    private string? descripcionPuj05 = "Apartamento Miami";
    private string? descripcionPuj06 = "Apartamento Miami";
    private string? descripcionPuj07 = "Apartamento Miami";
    private string? descripcionPuj08 = "Apartamento Miami";
    private string? descripcionPuj09 = "Apartamento Miami";

    public string? puja;

    private async Task ShowModal(string? _idCod,string? descripcion)    
    {        

        visible = true;
        var emailStorage = await _localStorageService.GetItem<String>(_userKey);
        UserDTO userData = new UserDTO();
        var UserData = await UserDataQueries.GetUserDataAsync(emailStorage);

        if (UserData != null)
        {
            IdAfiliado = UserData.Id;
        }

        puja = _idCod;
        Descripcion = descripcion;

        StateHasChanged();
    }

    //private async Task CreatePuja()
    //{
    //    var cadena = IdAfiliado + "|" + puja + "|" + montoPuja;

    //    var result = IEncryptor.EnCryption(cadena);

    //    await JS.InvokeVoidAsync("CreatePuja", result);

    //    StateHasChanged();
    //}

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var emailStorage = await _localStorageService.GetItem<String>(_userKey);
            if (string.IsNullOrEmpty(emailStorage))
            {
                var state = await authenticationStateProvider.GetAuthenticationStateAsync();
                if (!state.User.Identity.IsAuthenticated)
                {
                    navigationManager.NavigateTo("/account/signin?returnUrl=" + System.Net.WebUtility.UrlEncode(new Uri(navigationManager.Uri).PathAndQuery));
                }
            }
            else
            {
                email = emailStorage;

            }

            await JS.InvokeVoidAsync("ocultar");

            StateHasChanged();
        }
    }
}



