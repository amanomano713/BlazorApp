@page "/inmuebles"
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@inject ILocalStorageService _localStorageService
@using BlazorApp.Encryptor
@using Blazorise
@using Microsoft.JSInterop
@inject IJSRuntime JS
@inject IEncryptor IEncryptor
@inject IUserDataQueries UserDataQueries
@using BlazorApp.Components


<body>
    <div class="welcome"></div>
    <div class="panel-body">
        <Blazorise.Container Breakpoint="Breakpoint.Desktop">
            <Blazorise.Alert Color="Color.Primary" Visible="true">
                <h3><i class="icon-edit-sign teal"></i>SUBASTAS de INMUEBLES</h3>
                <p>
                    <strong style="color:black;font-size:medium">Crea una cuenta para administrar todo lo que haces con ClipOne, desde tus preferencias de compra hasta tu actividad en ClipOne</strong>
                </p>
            </Blazorise.Alert>
        </Blazorise.Container>
        <hr>
        @if (activate == true)
        {
            <ComponentPujar modalVisible=@visible modalDescripcion=@Descripcion
                        modalPuja=@puja modalIdAfiliado=@IdAfiliado modalId=@IdPuja></ComponentPujar>
        }
    </div>

    <CardDeck>
        <Card>
            <CardImage Source="/img/miami.png" Alt="Card image cap 3"></CardImage>
            <CardBody>
                <CardTitle Size="3">Precio $ @this.montoPuj01</CardTitle>
                <CardText>
                    <h4>@this.descripcionPuj01</h4>
                </CardText>
                <Button Color="Color.Primary" @onclick="async () => await ShowModal(this._idPuj01,this.descripcionPuj01,this._idPuj01)">Pujar</Button>
                <Button Color="Color.Secondary">Detalles</Button>
            </CardBody>
        </Card>
        <Card>
            <CardImage Source="/img/miami1.png" Alt="Card image cap 9"></CardImage>
            <CardBody>
                <CardTitle Size="3">Precio $ @this.montoPuj02</CardTitle>
                <CardText>
                    <h4>@this.descripcionPuj02</h4>
                </CardText>
                    <Button Color="Color.Primary" @onclick="async () => await ShowModal(this._idPuj02,this.descripcionPuj02,this._idPuj02)">Pujar</Button>
                    <Button Color="Color.Secondary">Detalles</Button>
            </CardBody>
        </Card>
        <Card>
            <CardImage Source="/img/miami3.png" Alt="Card image cap 12"></CardImage>
            <CardBody>
               <CardTitle Size="3">Precio $ @this.montoPuj03</CardTitle>
                <CardText>
                      <h4>@this.descripcionPuj03</h4>
               </CardText>
                    <Button Color="Color.Primary" @onclick="async () => await ShowModal(this._idPuj03,this.descripcionPuj03,this._idPuj03)">Pujar</Button>
                    <Button Color="Color.Secondary">Detalles</Button>
            </CardBody>
        </Card>
    </CardDeck>

</body>



@functions {

    async Task ShowModal(string? idCod, string? descripcion, string? puja)
    {
        var emailStorage = await _localStorageService.GetItem<String>(_userKey);
        if (string.IsNullOrEmpty(emailStorage))
        {
            var state = await authenticationStateProvider.GetAuthenticationStateAsync();
            if (!state.User.Identity.IsAuthenticated)
            {
                navigationManager.NavigateTo("/account/signin?returnUrl=" + System.Net.WebUtility.UrlEncode(new Uri(navigationManager.Uri).PathAndQuery));
            }
        }
        visible = true;
        puja = idCod;
        Descripcion = descripcion;
        IdPuja = puja;
        StateHasChanged();
    }

}

@code {

    private bool activate = false;
    private bool visible = false;
    private string? Descripcion;
    private string? email;
    private string _userKey = "key";
    private string? IdAfiliado;
    private bool result;

    private string? _idPuj01 = "Puja01";
    private string? _idPuj02 = "Puja02";
    private string? _idPuj03 = "Puja03";
    private string? _idPuj04 = "Puja04";
    private string? _idPuj05 = "Puja05";
    private string? _idPuj06 = "Puja06";
    private string? _idPuj07 = "Puja07";
    private string? _idPuj08 = "Puja08";
    private string? _idPuj09 = "Puja09";


    private string? montoPuj01 = "500.000";
    private string? montoPuj02 = "600.000";
    private string? montoPuj03 = "700.000";
    private string? montoPuj04 = "800.000";
    private string? montoPuj05 = "900.000";
    private string? montoPuj06 = "530.000";
    private string? montoPuj07 = "120.000";
    private string? montoPuj08 = "130.000";
    private string? montoPuj09 = "230.000";


    private string? descripcionPuj01 = "Apartamento Miami";
    private string? descripcionPuj02 = "Apartamento La Florida";
    private string? descripcionPuj03 = "Apartamento Miami Beach";
    private string? descripcionPuj04 = "Apartamento Orlando";
    private string? descripcionPuj05 = "Casa Miami";
    private string? descripcionPuj06 = "Apartamento New York";
    private string? descripcionPuj07 = "Duplex Miami";
    private string? descripcionPuj08 = "Estudio Miami";
    private string? descripcionPuj09 = "PH Miami";

    public string? puja;
    public string? IdPuja;

    private Task ShowModalCarousel()
    {
        return Task.CompletedTask;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var emailStorage = await _localStorageService.GetItem<String>(_userKey);
            if (string.IsNullOrEmpty(emailStorage))
            {
                var state = await authenticationStateProvider.GetAuthenticationStateAsync();
                if (!state.User.Identity.IsAuthenticated)
                {
                    navigationManager.NavigateTo("/account/signin?returnUrl=" + System.Net.WebUtility.UrlEncode(new Uri(navigationManager.Uri).PathAndQuery));
                }
            }
            else
            {
                email = emailStorage;
                UserDTO userData = new UserDTO();
                var UserData = await UserDataQueries.GetUserDataAsync(emailStorage);
                if (UserData == null)
                {
                    activate = false;
                }
                else
                {
                    activate = true;
                    IdAfiliado = UserData.Id;
                }

            }

            await JS.InvokeVoidAsync("ocultar");

        }

        StateHasChanged();

    }
}



