@page "/paquetemovil"
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@inject ILocalStorageService _localStorageService
@using BlazorApp.Encryptor
@using Microsoft.JSInterop
@inject IJSRuntime JsRuntime
@inject IEncryptor IEncryptor
@inject IUserDataQueries UserDataQueries
@using Blazorise
@using BlazorApp.Cache
@using System.Net
@using System.Net.Http.Headers
@inject ICacheBase cache
@inject IAccountService AccountService
@inject IHttpClientFactory _httpClientFactory
@inject AuthenticationStateProvider authenticationStateProvider

<body>
    <div class="paquete"></div>
    <div class="panel-body">
        <Blazorise.Container Breakpoint="Breakpoint.Desktop">
            <Blazorise.Alert Color="Color.Primary" Visible="true">
                <h3><i class="icon-edit-sign teal"></i>BITCOIN-Móvil</h3>
                <p>
                    <strong style="color:black;font-size:medium">Crea una cuenta para administrar todo lo que haces con ClipOne, desde tus preferencias de compra hasta tu actividad en ClipOne</strong>
                </p>
            </Blazorise.Alert>
        </Blazorise.Container>
        <hr>
        <TemplateSesion></TemplateSesion>
        <div class="modal" id="modal-id">
            <a href="#close" class="modal-overlay" aria-label="Close"></a>
            <div class="modal-container">
                <div class="modal-header">
                    <a href="#Close" class="btn btn-clear float-right" aria-label="Close"></a>
                    <div class="modal-title h5">Compra de Criptomoneda</div>
                </div>
                <div class="modal-body">
                    <div class="content">
                        <strong style="color:black;font-size:medium">Proceso de Compra de la Criptomoneda:@paquete Exitosa.</strong>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-10">
            <div class="card">
                <div class="card-image">
                    <img src="img/imagen.jpg" class="img-responsive">
                </div>
                <div class="card-header">
                    <div class="card-title h2">BTC</div>
                </div>
                <div class="card-body">
                    Inversión 100$
                </div>
                <div class="card-footer">
                    <button @onclick="async () => await CreatePackaqes(this._idCod100)" class="btn btn-primary">Comprar</button>
                </div>
            </div>
        </div>
        <hr>
        <div class="col-md-10">
            <div class="card">
                <div class="card-image">
                    <img src="img/imagen.jpg" class="img-responsive">
                </div>
                <div class="card-header">
                    <div class="card-title h2">BTC</div>
                </div>
                <div class="card-body">
                    Inversión 200$
                </div>
                <div class="card-footer">
                    <button @onclick="async () => await CreatePackaqes(this._idCod200)" class="btn btn-primary">Comprar</button>
                </div>
            </div>
        </div>
        <hr>
        <div class="col-md-10">
            <div class="card">
                <div class="card-image">
                    <img src="img/imagen.jpg" class="img-responsive">
                </div>
                <div class="card-header">
                    <div class="card-title h2">BTC</div>
                </div>
                <div class="card-body">
                    Inversión 500$
                </div>
                <div class="card-footer">
                    <button @onclick="async () => await CreatePackaqes(this._idCod500)" class="btn btn-primary">Comprar</button>
                </div>
            </div>
        </div>
    </div>
</body>


@code {

    private string? email;
    private string _userKey = "key";
    private string? IdAfiliado;
    private bool result;

    private string? _idCod = "Pack10";
    private string? _idCod20 = "Pack20";
    private string? _idCod50 = "Pack50";
    private string? _idCod100 = "Pack100";
    private string? _idCod200 = "Pack200";
    private string? _idCod500 = "Pack500";
    private string? _idCod1000 = "Pack1000";
    private string? _idCod1500 = "Pack1500";

    public string? paquete;

    private bool movil = false;

    private string? emailStorage;

    private string _configHttpClient = "Api.Cash";

    private async Task CreatePackaqes(string? _idCod)
    {
        var emailStorage = await _localStorageService.GetItem<String>(_userKey);
        UserDTO userData = new UserDTO();
        var UserData = await UserDataQueries.GetUserDataAsync(emailStorage);
        if (UserData != null)
        {
            IdAfiliado = UserData.Id;
        }

        var packageMontos = new List<PackageMontoDTO>()
        {
              new PackageMontoDTO() { CodPackage = "Pack10",   Monto = 10},
              new PackageMontoDTO() { CodPackage = "Pack20",   Monto = 20},
              new PackageMontoDTO() { CodPackage = "Pack50",   Monto = 50},
              new PackageMontoDTO() { CodPackage = "Pack100",  Monto = 100},
              new PackageMontoDTO() { CodPackage = "Pack200",  Monto = 200},
              new PackageMontoDTO() { CodPackage = "Pack500",  Monto = 500},
              new PackageMontoDTO() { CodPackage = "Pack1000", Monto = 1000},
              new PackageMontoDTO() { CodPackage = "Pack1500", Monto = 1500},
        };

        var monto = packageMontos.FirstOrDefault(x => x.CodPackage == _idCod);

        var packageDTO = new PackageDTO
         {
             IdAfiliado = IdAfiliado,
             CodPackage = _idCod,
             Monto      = monto.Monto
         };

        var result = await CreatePaqueteAsync(packageDTO).ConfigureAwait(false);

        if (result.StatusCode == HttpStatusCode.OK)
        {
            navigationManager.NavigateTo("/paquetemovil", forceLoad: true);
        }
        else
        {

        }
    }

    private async Task<HttpResponseMessage> CreatePaqueteAsync(PackageDTO packageDTO)
    {
        LoginRequest loginRequest = new LoginRequest
        {
            Username = emailStorage
        };

        HttpResponseMessage responseToken = await AccountService.GeneratorToken(loginRequest).ConfigureAwait(false);

        var resultToken = responseToken.Content.ReadAsStringAsync().ConfigureAwait(false).GetAwaiter().GetResult();

        resultToken = resultToken.Replace("\"", "");

        var httpClient = _httpClientFactory.CreateClient(_configHttpClient);

        var content = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(packageDTO), System.Text.Encoding.UTF8, "application/json");

        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", resultToken);

        return await httpClient.PatchAsync($"CreatePackage", content);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            emailStorage = await _localStorageService.GetItem<String>(_userKey);
            if (string.IsNullOrEmpty(emailStorage))
            {
                var key = KeyCache.GenCacheKey("User");
                var result = cache.Get<User>(key);
                if (result != null)
                {
                    emailStorage = result.Email.ToList().FirstOrDefault();
                }
                else
                {
                    var state = await authenticationStateProvider.GetAuthenticationStateAsync();
                    if (!state.User.Identity.IsAuthenticated)
                    {
                        navigationManager.NavigateTo("/account/signin?returnUrl=" + System.Net.WebUtility.UrlEncode(new Uri(navigationManager.Uri).PathAndQuery));
                    }
                    else
                    {
                        email = state.User.Identities.FirstOrDefault().Name;
                    }
                }
            }
            await JsRuntime.InvokeVoidAsync("mostrar");
            movil = await JsRuntime.InvokeAsync<bool>("movil");
            if (movil == false)
            {
                navigationManager.NavigateTo("/paquete", forceLoad: true);
            }
            StateHasChanged();
        }
    }
}
