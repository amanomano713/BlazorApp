@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@inject IAccountService AccountService
@inject ILocalStorageService _localStorageService
@inject IUserDataQueries UserDataQueries
@inject IJSRuntime JsRuntime
@using BlazorApp.Cache
@inject ICacheBase cache

@if (activate == true)
{
    <div class="container navbar navbar-dark bg-primary">
        <p class="label label-primary h6">@user</p>
        @*        <p class="label label-primary h6">@user <a class="btn btn-success h4" href="/account/signout">OK</a></p>*@
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
    <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
        <nav class="flex-column">
            @if (this.movil == false)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="oi oi-home" aria-hidden="true"></span> Home
                    </NavLink>
                </div>
            }
            @if (this.movil == false)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Registro">
                        <span class="oi oi-person" aria-hidden="true"></span> Registro
                    </NavLink>
                </div>
            }
            @if (this.movil == true)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="RegistroMovil">
                        <span class="oi oi-person" aria-hidden="true"></span> Registro
                    </NavLink>
                </div>
            }
            @if (this.movil == false)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Paquete">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Bitcoin
                    </NavLink>
                </div>
            }
            @if (this.movil == true)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="PaqueteMovil">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Bitcoin
                    </NavLink>
                </div>
            }
            @if (this.register == true)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Inmuebles">
                        <span class="oi oi-home" aria-hidden="true"></span> Subastas
                    </NavLink>
                </div>
            }
            @if (this.movil == true)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="TransferenciaMovil">
                        <span class="oi oi-monitor" aria-hidden="true"></span> Transferencia
                    </NavLink>
                </div>
            }
            @if (this.movil == false)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Transferencia">
                        <span class="oi oi-monitor" aria-hidden="true"></span> Transferencia
                    </NavLink>
                </div>
            }
            @if (this.movil == false)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Extrato">
                        <span class="oi oi-bar-chart" aria-hidden="true"></span> Operaciones
                    </NavLink>
                </div>
            }
            @if (this.movil == false)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Retiro">
                        <span class="oi oi-dollar" aria-hidden="true"></span> Retiro
                    </NavLink>
                </div>
            }
            @if (this.movil == true)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="RetiroMovil">
                        <span class="oi oi-dollar" aria-hidden="true"></span> Retiro
                    </NavLink>
                </div>
            }
            @if (this.movil == false)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Soporte">
                        <span class="oi oi-envelope-closed" aria-hidden="true"></span> Soporte
                    </NavLink>
                </div>
            }
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/account/signout">
                    <span class="oi oi-account-logout" aria-hidden="true"></span> Cerrar Sesión
                </NavLink>
            </div>
        </nav>
    </div>
}

@code {

    private bool movil = false;
    private bool visible = true;
    private bool register = false;
    private string? user;
    private bool activate = false;
    private string _userKey = "key";

    protected override async Task OnInitializedAsync()
    {
        var state = await authenticationStateProvider.GetAuthenticationStateAsync();

        if (!state.User.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/account/signin?returnUrl=" + System.Net.WebUtility.UrlEncode(new Uri(navigationManager.Uri).PathAndQuery));
        }
        else
        {
            user = state.User.Identities.FirstOrDefault()?.Name;
            activate = true;
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var emailStorage = await _localStorageService.GetItem<String>(_userKey);

            if (string.IsNullOrEmpty(emailStorage))
            {
                var key = KeyCache.GenCacheKey("User");
                var result = cache.Get<User>(key);
                if (result != null)
                {
                    emailStorage = result.Email.ToList().FirstOrDefault();
                }
                else
                {
                    var state = await authenticationStateProvider.GetAuthenticationStateAsync();
                    if (!state.User.Identity.IsAuthenticated)
                    {
                        navigationManager.NavigateTo("/account/signin?returnUrl=" + System.Net.WebUtility.UrlEncode(new Uri(navigationManager.Uri).PathAndQuery));
                    }
                    else
                    {
                        emailStorage = state.User.Identities.FirstOrDefault().Name;
                    }
                }
            }

            UserDTO userData = new UserDTO();
            var UserData = await UserDataQueries.GetUserDataAsync(emailStorage);
            if (UserData != null)
            {
                register = true;
            }
            else
            {
                register = false;
            }

        }
        StateHasChanged();
    }

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private async Task ToggleNavMenu()
    {
        visible = await JsRuntime.InvokeAsync<bool>("ajustar");
        movil = await JsRuntime.InvokeAsync<bool>("movil");
        collapseNavMenu = !collapseNavMenu;
    }
}
